# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#

defaults: &defaults
  working_directory: ~/workspace 
  docker:
    - image: circleci/openjdk:8-jdk
  environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx1024m"

test_defaults: &test_defaults
  working_directory: ~/workspace 
  docker:  
    - image: circleci/openjdk:8-jdk  
    - image: rabbitmq:3.6-management
      ports:
        - "5672:5672"
    - image: maltor/config-server
      environment:
        SPRING_PROFILES_ACTIVE: test
        JAVA_OPTS: -Xmx128m -DcertificateCheck=false
      ports:
      - "8888:8888"      
    - image: maltor/discovery-server
      environment:
        SPRING_PROFILES_ACTIVE: default
        JAVA_OPTS: -Xmx128m -DcertificateCheck=false
      ports:
      - "8761:8761"
    - image: postgres:10
      environment:
        POSTGRES_USER: shop
        POSTGRES_PASSWORD: shop
        POSTGRES_DB: shop-db
      ports:
      - "5432:5432"
  environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx512m"

      
cache_key : &cache_key v17-microservice-shop-demo-dependencies-{{ .Branch }}-{{ checksum "build.gradle" }}
  
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      
      - restore_cache:
          key: *cache_key
      
      - run: gradle dependencies 
      - run: gradle allDeps 

      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
          key: *cache_key

      - run: gradle build -DcertificateCheck=false -x test
           
      - persist_to_workspace:
          root: .
          paths:
            - .

  documentation:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/workspace
      - restore_cache:
          key: *cache_key
      - run: gradle asciidoctor -DcertificateCheck=false    
      - persist_to_workspace:
          root: .
          paths:
            - documentation  
    
  sonarqube:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/workspace
      - restore_cache:
          key: *cache_key    
      - run: gradle sonarqube -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=$SONAR_ORGANIZATION -Dsonar.login=$SONAR_LOGIN -x test
  
  test_product_service:
    <<: *test_defaults
    steps:
      - attach_workspace:
          at: ~/workspace
      - restore_cache:
          key: *cache_key
      - run:
          name: Run tests 
          command: |
              cd product-service
              gradle test -DcertificateCheck=false
      - run:
          name: Save test results 
          command: |
            mkdir -p junit
            cd product-service
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ../junit/ \;
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - persist_to_workspace:
          root: .
          paths:
            - junit   

  test_recommendation_service:
    <<: *test_defaults
    steps:
      - attach_workspace:
          at: ~/workspace
      - restore_cache:
          key: *cache_key
      - run:
          name: Run tests 
          command: |
              cd recommendation-service
              gradle test -DcertificateCheck=false
      - run:
          name: Save test results 
          command: |
            mkdir -p junit
            cd recommendation-service
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ../junit/ \;
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - persist_to_workspace:
          root: .
          paths:
            - junit 

  test_review_service:
    <<: *test_defaults
    steps:
      - attach_workspace:
          at: ~/workspace
      - restore_cache:
          key: *cache_key
      - run:
          name: Run tests 
          command: |
              cd review-service
              gradle test -DcertificateCheck=false
      - run:
          name: Save test results 
          command: |
            mkdir -p junit
            cd review-service
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ../junit/ \;
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - persist_to_workspace:
          root: .
          paths:
            - junit 
 
  test_product_composite_service:
    <<: *test_defaults
    steps:
      - attach_workspace:
          at: ~/workspace
      - restore_cache:
          key: *cache_key
      - run:
          name: Run tests 
          command: |
              cd product-composite-service
              gradle test -DcertificateCheck=false
      - run:
          name: Save test results 
          command: |
            mkdir -p junit
            cd product-composite-service
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ../junit/ \;
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - persist_to_workspace:
          root: .
          paths:
            - junit                
            
  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/workspace
      
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - store_artifacts:
          path: documentation    
      
      - setup_remote_docker
      
      - run:
          name: Push Docker images
          command: |
            #TAG="0.1.${CIRCLE_BUILD_NUM}"
            #TAG="CIRCLE_BRANCH"
            TAG="latest"
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            
            cd product-service
            docker build -t maltor/product-service:$TAG .
            docker push maltor/product-service:$TAG
            
            cd ..
            cd recommendation-service
            docker build -t maltor/recommendation-service:$TAG .
            docker push maltor/recommendation-service:$TAG 
            
            cd ..
            cd review-service
            docker build -t maltor/review-service:$TAG .
            docker push maltor/review-service:$TAG 
            
            cd ..
            cd product-composite-service
            docker build -t maltor/product-composite-service:$TAG .
            docker push maltor/product-composite-service:$TAG
   
workflows:
  version: 2
  ci:
    jobs:
      
      - build
      
      - documentation:
          requires:
            - build
    
      - test_product_service:
          requires:
            - build
          
      - test_recommendation_service:
          requires:
            - build 
          
      - test_review_service:
          requires:
            - build      
      
      - test_product_composite_service:
          requires:
            - build
            - test_product_service
            - test_review_service
            - test_recommendation_service             

      - sonarqube:
          requires:
            - build
                
      - deploy:
          requires:
            - documentation
            - sonarqube
            - test_product_composite_service
            
            
            